{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthData",
            "id": "interface-AuthData-a22e27f144f858e12f96bad234f607c5",
            "file": "src/app/auth/auth-data.model.ts",
            "type": "interface",
            "sourceCode": "export interface AuthData {\n  email: string;\n  password: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Exercise",
            "id": "interface-Exercise-c339a32504236fd4a52b68cf4e7758e5",
            "file": "src/app/training/exercise.model.ts",
            "type": "interface",
            "sourceCode": "export interface Exercise {\n  id: string;\n  name: string;\n  duration: number;\n  calories: number;\n  date?: Date;\n  state?: 'completed' | 'cancelled' | 'editing' | null;\n}\n",
            "properties": [
                {
                    "name": "calories",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "date",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "duration",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "state",
                    "type": "\"completed\" | \"cancelled\" | \"editing\" | null",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-d80ff72a574192d8d0835271a5e2d5f4",
            "file": "src/app/app.reducer.ts",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap, createFeatureSelector, createSelector } from '@ngrx/store'\nimport * as fromUI from './shared/ui.reducer'\nimport * as fromAuth from './auth/auth.reducer'\n\nexport interface State {\n  ui: fromUI.State,\n  auth: fromAuth.State,\n}\n\nexport const reducers:ActionReducerMap<State> = {\n  ui: fromUI.uiReducer,\n  auth: fromAuth.authReducer\n};\n\nexport const getUiState = createFeatureSelector<fromUI.State>('ui');\nexport const getIsLoading = createSelector(getUiState,fromUI.getIsLoading);\n\nexport const getAuthState = createFeatureSelector<fromAuth.State>('auth');\nexport const getIsAuth = createSelector(getAuthState,fromAuth.getIsAuth)\n",
            "properties": [
                {
                    "name": "auth",
                    "type": "fromAuth.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "ui",
                    "type": "fromUI.State",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-f554d995a05e330532aab87dc58d6558-1",
            "file": "src/app/auth/auth.reducer.ts",
            "type": "interface",
            "sourceCode": "import { AuthActions, SET_AUTHENTICATED, SET_UNAUTHENTICATED } from \"./auth.actions\";\n\nexport interface State {\n  isAuthenticated: boolean;\n}\n\nconst initialState:State = {\n  isAuthenticated: false\n}\n\nexport function authReducer(state = initialState, action:AuthActions){\n  switch(action.type) {\n    case SET_AUTHENTICATED:\n      return {\n        isAuthenticated: true\n      };\n    case SET_UNAUTHENTICATED:\n      return {\n        isAuthenticated: false\n      };\n    default:{\n      return state\n    }\n  }\n}\n\nexport function getIsAuth(state:State) {\n  return state.isAuthenticated;\n}\n",
            "properties": [
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "State",
            "id": "interface-State-b01093df71b88c9ee7c7e9df09bc67c0-2",
            "file": "src/app/shared/ui.reducer.ts",
            "type": "interface",
            "sourceCode": "import { START_LOADING, STOP_LOADING, UIActions } from \"./ui.actions\";\n\nexport interface State {\n  isLoading: boolean;\n}\n\nconst initialState:State = {\n  isLoading: false\n}\n\nexport function uiReducer(state = initialState, action:UIActions){\n  switch(action.type) {\n    case START_LOADING:\n      return {\n        isLoading: true\n      };\n    case STOP_LOADING:\n      return {\n        isLoading: false\n      };\n    default:{\n      return state\n    }\n  }\n}\n\nexport const getIsLoading = (state:State) => state.isLoading;\n\n\n",
            "properties": [
                {
                    "name": "isLoading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "State-2"
        },
        {
            "name": "State",
            "id": "interface-State-bbda25e9dd523f0b302a818a046e54ff-3",
            "file": "src/app/training/training.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Exercise } from \"./exercise.model\";\nimport * as fromRoot from '../app.reducer';\nimport { TrainingActions, SET_AVAILABLE_TRAININGS, SET_FINISHED_TRAININGS, START_TRAINING, STOP_TRAINING, START_EDIT_TRAINING, STOP_EDIT_TRAINING, START_REMOVE_TRAINING, STOP_REMOVE_TRAINING,START_ADD_TRAINING, STOP_ADD_TRAINING  } from \"./training.actions\";\nimport { createFeatureSelector, createSelector } from \"@ngrx/store\";\n\n\nexport interface TrainingState {\n  availableExercises: Exercise[],\n  finishedExercises: Exercise[],\n  activeTraining: Exercise,\n  editingTraining: Exercise,\n  removingTraining: Exercise,\n  addingTraining: Exercise,\n}\n\nexport interface State extends fromRoot.State {\n  training: TrainingState,\n}\n\nconst initialState: TrainingState = {\n  availableExercises: [],\n  finishedExercises: [],\n  activeTraining: null,\n  editingTraining: null,\n  removingTraining: null,\n  addingTraining: null,\n}\n\nexport function trainingReducer(state = initialState, action: TrainingActions) {\n  switch (action.type) {\n    case SET_AVAILABLE_TRAININGS:\n      return {\n        ...state,\n        availableExercises: action.payload\n      };\n    case SET_FINISHED_TRAININGS:\n      return {\n        ...state,\n        finishedExercises: action.payload\n      };\n    case START_TRAINING:\n      return {\n        ...state,\n        activeTraining: { ...state.availableExercises.find(ex => ex.id === action.payload) }\n      };\n    case STOP_TRAINING:\n      return {\n        ...state,\n        activeTraining: null\n      };\n    case START_EDIT_TRAINING:\n      return {\n        ...state,\n        editingTraining: { ...state.availableExercises.find(ex => ex.id === action.payload) }\n      };\n    case STOP_EDIT_TRAINING:\n      return {\n        ...state,\n        editingTraining: null\n      }\n    case START_REMOVE_TRAINING:\n      return {\n        ...state,\n        removingTraining: { ...state.availableExercises.find(ex => ex.id === action.payload) }\n      };\n    case STOP_REMOVE_TRAINING:\n      return {\n        ...state,\n        removingTraining: null\n      }\n    case START_ADD_TRAINING:\n        return {\n          ...state,\n          addingTraining: { ...state.availableExercises.find(ex => ex.id === action.payload) }\n        };\n    case STOP_REMOVE_TRAINING:\n        return {\n          ...state,\n          addingTraining: null\n      }\n    default: {\n      return state\n    }\n  }\n}\n\nexport const getTrainingState = createFeatureSelector<TrainingState>('training');\n\nexport const getAvailableExercises = createSelector(getTrainingState, (state: TrainingState) => state.availableExercises);\n\nexport const getActiveTrainings = createSelector(getTrainingState, (state: TrainingState) => state.activeTraining);\nexport const getEditingTraining = createSelector(getTrainingState, (state: TrainingState) => state.editingTraining);\nexport const getRemovingTraining = createSelector(getTrainingState, (state: TrainingState) => state.removingTraining);\nexport const getAddingTraining = createSelector(getTrainingState, (state: TrainingState) => state.addingTraining);\n\nexport const getFinishedExercise = createSelector(getTrainingState, (state: TrainingState) => state.finishedExercises);\n\nexport const getIsTraining = createSelector(getTrainingState, (state: TrainingState) => state.activeTraining != null);\nexport const getIsEditing = createSelector(getTrainingState, (state: TrainingState) => state.editingTraining != null);\n",
            "properties": [
                {
                    "name": "training",
                    "type": "TrainingState",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "State-3"
        },
        {
            "name": "TrainingState",
            "id": "interface-TrainingState-bbda25e9dd523f0b302a818a046e54ff",
            "file": "src/app/training/training.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Exercise } from \"./exercise.model\";\nimport * as fromRoot from '../app.reducer';\nimport { TrainingActions, SET_AVAILABLE_TRAININGS, SET_FINISHED_TRAININGS, START_TRAINING, STOP_TRAINING, START_EDIT_TRAINING, STOP_EDIT_TRAINING, START_REMOVE_TRAINING, STOP_REMOVE_TRAINING,START_ADD_TRAINING, STOP_ADD_TRAINING  } from \"./training.actions\";\nimport { createFeatureSelector, createSelector } from \"@ngrx/store\";\n\n\nexport interface TrainingState {\n  availableExercises: Exercise[],\n  finishedExercises: Exercise[],\n  activeTraining: Exercise,\n  editingTraining: Exercise,\n  removingTraining: Exercise,\n  addingTraining: Exercise,\n}\n\nexport interface State extends fromRoot.State {\n  training: TrainingState,\n}\n\nconst initialState: TrainingState = {\n  availableExercises: [],\n  finishedExercises: [],\n  activeTraining: null,\n  editingTraining: null,\n  removingTraining: null,\n  addingTraining: null,\n}\n\nexport function trainingReducer(state = initialState, action: TrainingActions) {\n  switch (action.type) {\n    case SET_AVAILABLE_TRAININGS:\n      return {\n        ...state,\n        availableExercises: action.payload\n      };\n    case SET_FINISHED_TRAININGS:\n      return {\n        ...state,\n        finishedExercises: action.payload\n      };\n    case START_TRAINING:\n      return {\n        ...state,\n        activeTraining: { ...state.availableExercises.find(ex => ex.id === action.payload) }\n      };\n    case STOP_TRAINING:\n      return {\n        ...state,\n        activeTraining: null\n      };\n    case START_EDIT_TRAINING:\n      return {\n        ...state,\n        editingTraining: { ...state.availableExercises.find(ex => ex.id === action.payload) }\n      };\n    case STOP_EDIT_TRAINING:\n      return {\n        ...state,\n        editingTraining: null\n      }\n    case START_REMOVE_TRAINING:\n      return {\n        ...state,\n        removingTraining: { ...state.availableExercises.find(ex => ex.id === action.payload) }\n      };\n    case STOP_REMOVE_TRAINING:\n      return {\n        ...state,\n        removingTraining: null\n      }\n    case START_ADD_TRAINING:\n        return {\n          ...state,\n          addingTraining: { ...state.availableExercises.find(ex => ex.id === action.payload) }\n        };\n    case STOP_REMOVE_TRAINING:\n        return {\n          ...state,\n          addingTraining: null\n      }\n    default: {\n      return state\n    }\n  }\n}\n\nexport const getTrainingState = createFeatureSelector<TrainingState>('training');\n\nexport const getAvailableExercises = createSelector(getTrainingState, (state: TrainingState) => state.availableExercises);\n\nexport const getActiveTrainings = createSelector(getTrainingState, (state: TrainingState) => state.activeTraining);\nexport const getEditingTraining = createSelector(getTrainingState, (state: TrainingState) => state.editingTraining);\nexport const getRemovingTraining = createSelector(getTrainingState, (state: TrainingState) => state.removingTraining);\nexport const getAddingTraining = createSelector(getTrainingState, (state: TrainingState) => state.addingTraining);\n\nexport const getFinishedExercise = createSelector(getTrainingState, (state: TrainingState) => state.finishedExercises);\n\nexport const getIsTraining = createSelector(getTrainingState, (state: TrainingState) => state.activeTraining != null);\nexport const getIsEditing = createSelector(getTrainingState, (state: TrainingState) => state.editingTraining != null);\n",
            "properties": [
                {
                    "name": "activeTraining",
                    "type": "Exercise",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "addingTraining",
                    "type": "Exercise",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "availableExercises",
                    "type": "Exercise[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "editingTraining",
                    "type": "Exercise",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "finishedExercises",
                    "type": "Exercise[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "removingTraining",
                    "type": "Exercise",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-37531f8acd5053316e29e40b51a161cb",
            "file": "src/app/auth/user.model.ts",
            "type": "interface",
            "sourceCode": "export interface User {\n  email:string;\n  userId: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "userId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-86e13b3292ae869382ae83694111e06d",
            "file": "src/app/auth/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "initAuthListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "authData",
                            "type": "AuthData"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "authData",
                            "type": "AuthData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "registerUser",
                    "args": [
                        {
                            "name": "authData",
                            "type": "AuthData"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "authData",
                            "type": "AuthData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Router } from '@angular/router';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { TrainingService } from '../training/training.service';\nimport { UIService } from '../shared/ui.service';\nimport { Store } from '@ngrx/store';\nimport * as fromRoot from '../app.reducer'\nimport * as UI from '../shared/ui.actions'\nimport * as Auth from '../auth/auth.actions';\nimport { AuthData } from './auth-data.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n    private router: Router,\n    private auth: AngularFireAuth,\n    private trainingService: TrainingService,\n    private uiservice: UIService,\n    private store: Store<fromRoot.State>,\n  ) { }\n\n  initAuthListener() {\n    this.auth.authState.subscribe(user => {\n      if (user) {\n        this.store.dispatch(new Auth.SetAuthenticated())\n        this.router.navigate(['/training'])\n      }\n      else {\n        this.trainingService.cancelSubscriptions();\n        this.store.dispatch(new Auth.SetUnauthenticated())\n        this.router.navigate(['/login'])\n      }\n    })\n  }\n\n  registerUser(authData: AuthData) {\n    this.store.dispatch(new UI.StartLoading());\n    this.auth.createUserWithEmailAndPassword(\n      authData.email,\n      authData.password\n    )\n    .then(() => this.store.dispatch(new UI.StopLoading))\n    .catch(error => {\n      this.uiservice.showSnackbar(error.message,null ,{ duration: 3000});\n      this.store.dispatch(new UI.StopLoading());\n    })\n  }\n\n  login(authData: AuthData){\n    this.store.dispatch(new UI.StartLoading());\n    this.auth.signInWithEmailAndPassword(authData.email,authData.password)\n      .then(() => this.store.dispatch(new UI.StopLoading))\n      .catch(error => {\n        this.uiservice.showSnackbar(error.message,null ,{ duration: 3000});\n        this.store.dispatch(new UI.StopLoading());\n    });\n}\n\n  logout() {\n    this.auth.signOut();\n    this.store.dispatch(new Auth.SetUnauthenticated())\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "auth",
                        "type": "AngularFireAuth"
                    },
                    {
                        "name": "trainingService",
                        "type": "TrainingService"
                    },
                    {
                        "name": "uiservice",
                        "type": "UIService"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromRoot.State>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AngularFireAuth",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "trainingService",
                        "type": "TrainingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uiservice",
                        "type": "UIService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromRoot.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TrainingService",
            "id": "injectable-TrainingService-3bbbab59285107bc96ea0b695a7ef58e",
            "file": "src/app/training/training.service.ts",
            "properties": [
                {
                    "name": "exerciseToUpdateOrAdd",
                    "type": "Exercise",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "fbSubs",
                    "defaultValue": "[]",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addDataToDatabase",
                    "args": [
                        {
                            "name": "exercise",
                            "type": "Exercise"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "exercise",
                            "type": "Exercise",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addExerciseToDatabase",
                    "args": [
                        {
                            "name": "ex",
                            "type": "Exercise"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "ex",
                            "type": "Exercise",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelExercise",
                    "args": [
                        {
                            "name": "progress",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "progress",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "completeExercise",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "EditTraining",
                    "args": [
                        {
                            "name": "selectedId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "jsdoctags": [
                        {
                            "name": "selectedId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchAvailableExercises",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "fetchCompletedOrCancelledExercises",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "getEditingTraining",
                    "args": [],
                    "optional": false,
                    "returnType": "Exercise",
                    "typeParameters": [],
                    "line": 104
                },
                {
                    "name": "removeExerciseFromDatabase",
                    "args": [
                        {
                            "name": "ex",
                            "type": "Exercise"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "jsdoctags": [
                        {
                            "name": "ex",
                            "type": "Exercise",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startExercise",
                    "args": [
                        {
                            "name": "selectedId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "selectedId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDatabaseWith",
                    "args": [
                        {
                            "name": "exercise",
                            "type": "Exercise"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "exercise",
                            "type": "Exercise",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Exercise } from \"./exercise.model\";\nimport { AngularFirestore } from \"@angular/fire/firestore\";\nimport { map, take } from \"rxjs/operators\";\nimport { Subscription } from 'rxjs';\nimport { UIService } from \"../shared/ui.service\";\nimport * as UI from '../shared/ui.actions';\nimport * as Training from './training.actions';\nimport * as fromTraining from './training.reducer';\nimport { Store } from \"@ngrx/store\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TrainingService {\n  private fbSubs: Subscription[] = [];\n  private exerciseToUpdateOrAdd: Exercise\n\n  constructor(\n    private db: AngularFirestore,\n    private uiservice: UIService,\n    private store: Store<fromTraining.State>,\n  ) { }\n\n  fetchAvailableExercises() {\n    this.store.dispatch(new UI.StartLoading());\n    this.fbSubs.push(this.db.collection('availableExercices')\n      .snapshotChanges().pipe(\n        map(docArray => {\n          return docArray.map(doc => {\n            return {\n              id: doc.payload.doc.id,\n              name: doc.payload.doc.data()['name'],\n              duration: doc.payload.doc.data()['duration'],\n              calories: doc.payload.doc.data()['calories'],\n            }\n          })\n        })\n      ).subscribe((exercises: Exercise[]) => {\n        this.store.dispatch(new UI.StopLoading());\n        this.store.dispatch(new Training.SetAvailableTrainings(exercises));\n      },\n        () => {\n          this.store.dispatch(new UI.StopLoading());\n          this.uiservice.showSnackbar('Fetching exercises failed, please try again later', null, 3000)\n          this.store.dispatch(new Training.StopTraining());\n        }))\n  }\n\n  startExercise(selectedId: string) {\n    this.store.dispatch(new Training.StartTraining(selectedId));\n  }\n\n  completeExercise() {\n    this.store.select(fromTraining.getActiveTrainings).pipe(take(1)).subscribe(ex => {\n      this.addDataToDatabase({\n        ...ex,\n        date: new Date(),\n        state: 'completed'\n      });\n      this.store.dispatch(new Training.StopTraining());\n    });\n  }\n\n  cancelExercise(progress: number) {\n    this.store.select(fromTraining.getActiveTrainings).pipe(take(1)).subscribe(ex => {\n      this.addDataToDatabase({\n        ...ex,\n        duration: ex.duration * (progress / 100),\n        calories: ex.calories * (progress / 100),\n        date: new Date(),\n        state: 'cancelled'\n      });\n      this.store.dispatch(new Training.StopTraining());\n    });\n  }\n\n  fetchCompletedOrCancelledExercises() {\n    this.fbSubs.push(this.db\n      .collection('finishedExercices')\n      .valueChanges()\n      .subscribe((exercises: Exercise[]) => {\n        this.store.dispatch(new Training.SetFinishedTrainings(exercises))\n      }))\n  }\n\n  private addDataToDatabase(exercise: Exercise) {\n    this.db.collection('finishedExercices').add(exercise)\n  }\n\n  updateDatabaseWith(exercise: Exercise) {\n    this.db.collection('availableExercices').doc(exercise.id).update(exercise)\n    this.store.dispatch(new Training.StopEditTraining());\n  }\n\n  cancelSubscriptions() {\n    this.fbSubs.forEach(sub => sub.unsubscribe());\n  }\n\n  EditTraining(selectedId: string) {\n    this.store.dispatch(new Training.StartEditTraining(selectedId));\n  }\n\n  getEditingTraining():Exercise {\n    let fetchedExercise: Exercise;\n    this.store.select(fromTraining.getEditingTraining).pipe(take(1)).subscribe(exercise => {\n      fetchedExercise = exercise\n    });\n    return fetchedExercise;\n  }\n\n  removeExerciseFromDatabase(ex: Exercise): void {\n    this.db.collection('availableExercices').doc(ex.id).delete()\n    console.log('exercise removed: ', JSON.stringify(ex));\n  }\n\n  addExerciseToDatabase(ex: Exercise): void {\n    this.db.collection('availableExercices').add(ex);\n    console.log('exercise added: ', JSON.stringify(ex));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "db",
                        "type": "AngularFirestore"
                    },
                    {
                        "name": "uiservice",
                        "type": "UIService"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uiservice",
                        "type": "UIService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UIService",
            "id": "injectable-UIService-7a4e3e74aa73424357cdadceab034918",
            "file": "src/app/shared/ui.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "showSnackbar",
                    "args": [
                        {
                            "name": "message",
                            "type": ""
                        },
                        {
                            "name": "action",
                            "type": ""
                        },
                        {
                            "name": "duration",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\n\n@Injectable()\nexport class UIService {\n\n\n  constructor(private snackbar: MatSnackBar) {}\n\n  showSnackbar(message,action,duration) {\n    this.snackbar.open(message,action,duration);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "snackbar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetAuthenticated",
            "id": "class-SetAuthenticated-4ee0937b377361d091f0e2c84ce981de",
            "file": "src/app/auth/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\n\nexport const SET_AUTHENTICATED = '[Auth] Set Authenticated';\nexport const SET_UNAUTHENTICATED = '[Auth] Set Unauthenticated';\n\nexport class SetAuthenticated implements Action {\n  readonly type = SET_AUTHENTICATED\n}\n\nexport class SetUnauthenticated implements Action {\n  readonly type = SET_UNAUTHENTICATED\n}\n\nexport type AuthActions = SetAuthenticated | SetUnauthenticated;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "SET_AUTHENTICATED",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SetAvailableTrainings",
            "id": "class-SetAvailableTrainings-c534eb3ceb73c3afb2333836d7363ca6",
            "file": "src/app/training/training.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\nimport { Exercise } from \"./exercise.model\";\n\nexport const SET_AVAILABLE_TRAININGS = '[Training] Set Available Exercises';\nexport const SET_FINISHED_TRAININGS = '[Training] Set Finished Exercises';\nexport const START_TRAINING = '[Training] Start Training';\nexport const STOP_TRAINING = '[Training] Stop Training';\nexport const START_EDIT_TRAINING = '[Training] Start Edit Training';\nexport const STOP_EDIT_TRAINING = '[Training] Stop Edit Training';\nexport const START_REMOVE_TRAINING = '[Training] Start Remove Training';\nexport const STOP_REMOVE_TRAINING = '[Training] Stop Remove Training';\nexport const START_ADD_TRAINING = '[Training] Start Add Training';\nexport const STOP_ADD_TRAINING = '[Training] Stop Add Training';\n\nexport class SetAvailableTrainings implements Action {\n  readonly type = SET_AVAILABLE_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class SetFinishedTrainings implements Action {\n  readonly type = SET_FINISHED_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class StartTraining implements Action {\n  readonly type = START_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\nexport class StopTraining implements Action {\n  readonly type = STOP_TRAINING\n}\n\nexport class StartEditTraining implements Action {\n  readonly type = START_EDIT_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopEditTraining implements Action {\n  readonly type = STOP_EDIT_TRAINING;\n}\n\nexport class StartRemoveTraining implements Action {\n  readonly type = START_REMOVE_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopRemoveTraining implements Action {\n  readonly type = STOP_REMOVE_TRAINING;\n}\n\nexport class StartAddTraining implements Action {\n  readonly type = START_ADD_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopAddTraining implements Action {\n  readonly type = STOP_ADD_TRAINING;\n}\n\n\n\n\nexport type TrainingActions = SetAvailableTrainings | SetFinishedTrainings | StartTraining | StopTraining | StartEditTraining | StopEditTraining | StartRemoveTraining | StopRemoveTraining | StartAddTraining |StopAddTraining;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Exercise[]"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Exercise[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Exercise[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "SET_AVAILABLE_TRAININGS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SetFinishedTrainings",
            "id": "class-SetFinishedTrainings-c534eb3ceb73c3afb2333836d7363ca6",
            "file": "src/app/training/training.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\nimport { Exercise } from \"./exercise.model\";\n\nexport const SET_AVAILABLE_TRAININGS = '[Training] Set Available Exercises';\nexport const SET_FINISHED_TRAININGS = '[Training] Set Finished Exercises';\nexport const START_TRAINING = '[Training] Start Training';\nexport const STOP_TRAINING = '[Training] Stop Training';\nexport const START_EDIT_TRAINING = '[Training] Start Edit Training';\nexport const STOP_EDIT_TRAINING = '[Training] Stop Edit Training';\nexport const START_REMOVE_TRAINING = '[Training] Start Remove Training';\nexport const STOP_REMOVE_TRAINING = '[Training] Stop Remove Training';\nexport const START_ADD_TRAINING = '[Training] Start Add Training';\nexport const STOP_ADD_TRAINING = '[Training] Stop Add Training';\n\nexport class SetAvailableTrainings implements Action {\n  readonly type = SET_AVAILABLE_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class SetFinishedTrainings implements Action {\n  readonly type = SET_FINISHED_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class StartTraining implements Action {\n  readonly type = START_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\nexport class StopTraining implements Action {\n  readonly type = STOP_TRAINING\n}\n\nexport class StartEditTraining implements Action {\n  readonly type = START_EDIT_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopEditTraining implements Action {\n  readonly type = STOP_EDIT_TRAINING;\n}\n\nexport class StartRemoveTraining implements Action {\n  readonly type = START_REMOVE_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopRemoveTraining implements Action {\n  readonly type = STOP_REMOVE_TRAINING;\n}\n\nexport class StartAddTraining implements Action {\n  readonly type = START_ADD_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopAddTraining implements Action {\n  readonly type = STOP_ADD_TRAINING;\n}\n\n\n\n\nexport type TrainingActions = SetAvailableTrainings | SetFinishedTrainings | StartTraining | StopTraining | StartEditTraining | StopEditTraining | StartRemoveTraining | StopRemoveTraining | StartAddTraining |StopAddTraining;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Exercise[]"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Exercise[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Exercise[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "SET_FINISHED_TRAININGS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SetUnauthenticated",
            "id": "class-SetUnauthenticated-4ee0937b377361d091f0e2c84ce981de",
            "file": "src/app/auth/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\n\nexport const SET_AUTHENTICATED = '[Auth] Set Authenticated';\nexport const SET_UNAUTHENTICATED = '[Auth] Set Unauthenticated';\n\nexport class SetAuthenticated implements Action {\n  readonly type = SET_AUTHENTICATED\n}\n\nexport class SetUnauthenticated implements Action {\n  readonly type = SET_UNAUTHENTICATED\n}\n\nexport type AuthActions = SetAuthenticated | SetUnauthenticated;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "SET_UNAUTHENTICATED",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "StartAddTraining",
            "id": "class-StartAddTraining-c534eb3ceb73c3afb2333836d7363ca6",
            "file": "src/app/training/training.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\nimport { Exercise } from \"./exercise.model\";\n\nexport const SET_AVAILABLE_TRAININGS = '[Training] Set Available Exercises';\nexport const SET_FINISHED_TRAININGS = '[Training] Set Finished Exercises';\nexport const START_TRAINING = '[Training] Start Training';\nexport const STOP_TRAINING = '[Training] Stop Training';\nexport const START_EDIT_TRAINING = '[Training] Start Edit Training';\nexport const STOP_EDIT_TRAINING = '[Training] Stop Edit Training';\nexport const START_REMOVE_TRAINING = '[Training] Start Remove Training';\nexport const STOP_REMOVE_TRAINING = '[Training] Stop Remove Training';\nexport const START_ADD_TRAINING = '[Training] Start Add Training';\nexport const STOP_ADD_TRAINING = '[Training] Stop Add Training';\n\nexport class SetAvailableTrainings implements Action {\n  readonly type = SET_AVAILABLE_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class SetFinishedTrainings implements Action {\n  readonly type = SET_FINISHED_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class StartTraining implements Action {\n  readonly type = START_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\nexport class StopTraining implements Action {\n  readonly type = STOP_TRAINING\n}\n\nexport class StartEditTraining implements Action {\n  readonly type = START_EDIT_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopEditTraining implements Action {\n  readonly type = STOP_EDIT_TRAINING;\n}\n\nexport class StartRemoveTraining implements Action {\n  readonly type = START_REMOVE_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopRemoveTraining implements Action {\n  readonly type = STOP_REMOVE_TRAINING;\n}\n\nexport class StartAddTraining implements Action {\n  readonly type = START_ADD_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopAddTraining implements Action {\n  readonly type = STOP_ADD_TRAINING;\n}\n\n\n\n\nexport type TrainingActions = SetAvailableTrainings | SetFinishedTrainings | StartTraining | StopTraining | StartEditTraining | StopEditTraining | StartRemoveTraining | StopRemoveTraining | StartAddTraining |StopAddTraining;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "START_ADD_TRAINING",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "StartEditTraining",
            "id": "class-StartEditTraining-c534eb3ceb73c3afb2333836d7363ca6",
            "file": "src/app/training/training.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\nimport { Exercise } from \"./exercise.model\";\n\nexport const SET_AVAILABLE_TRAININGS = '[Training] Set Available Exercises';\nexport const SET_FINISHED_TRAININGS = '[Training] Set Finished Exercises';\nexport const START_TRAINING = '[Training] Start Training';\nexport const STOP_TRAINING = '[Training] Stop Training';\nexport const START_EDIT_TRAINING = '[Training] Start Edit Training';\nexport const STOP_EDIT_TRAINING = '[Training] Stop Edit Training';\nexport const START_REMOVE_TRAINING = '[Training] Start Remove Training';\nexport const STOP_REMOVE_TRAINING = '[Training] Stop Remove Training';\nexport const START_ADD_TRAINING = '[Training] Start Add Training';\nexport const STOP_ADD_TRAINING = '[Training] Stop Add Training';\n\nexport class SetAvailableTrainings implements Action {\n  readonly type = SET_AVAILABLE_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class SetFinishedTrainings implements Action {\n  readonly type = SET_FINISHED_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class StartTraining implements Action {\n  readonly type = START_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\nexport class StopTraining implements Action {\n  readonly type = STOP_TRAINING\n}\n\nexport class StartEditTraining implements Action {\n  readonly type = START_EDIT_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopEditTraining implements Action {\n  readonly type = STOP_EDIT_TRAINING;\n}\n\nexport class StartRemoveTraining implements Action {\n  readonly type = START_REMOVE_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopRemoveTraining implements Action {\n  readonly type = STOP_REMOVE_TRAINING;\n}\n\nexport class StartAddTraining implements Action {\n  readonly type = START_ADD_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopAddTraining implements Action {\n  readonly type = STOP_ADD_TRAINING;\n}\n\n\n\n\nexport type TrainingActions = SetAvailableTrainings | SetFinishedTrainings | StartTraining | StopTraining | StartEditTraining | StopEditTraining | StartRemoveTraining | StopRemoveTraining | StartAddTraining |StopAddTraining;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "START_EDIT_TRAINING",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "StartLoading",
            "id": "class-StartLoading-37dfa67d956bfd4912bf20c70b4c4653",
            "file": "src/app/shared/ui.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\n\nexport const START_LOADING = '[UI] Start Loading';\nexport const STOP_LOADING = '[UI] Stop Loading';\n\nexport class StartLoading implements Action {\n  readonly type = START_LOADING\n}\n\nexport class StopLoading implements Action {\n  readonly type = STOP_LOADING\n}\n\nexport type UIActions = StartLoading | StopLoading;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "START_LOADING",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "StartRemoveTraining",
            "id": "class-StartRemoveTraining-c534eb3ceb73c3afb2333836d7363ca6",
            "file": "src/app/training/training.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\nimport { Exercise } from \"./exercise.model\";\n\nexport const SET_AVAILABLE_TRAININGS = '[Training] Set Available Exercises';\nexport const SET_FINISHED_TRAININGS = '[Training] Set Finished Exercises';\nexport const START_TRAINING = '[Training] Start Training';\nexport const STOP_TRAINING = '[Training] Stop Training';\nexport const START_EDIT_TRAINING = '[Training] Start Edit Training';\nexport const STOP_EDIT_TRAINING = '[Training] Stop Edit Training';\nexport const START_REMOVE_TRAINING = '[Training] Start Remove Training';\nexport const STOP_REMOVE_TRAINING = '[Training] Stop Remove Training';\nexport const START_ADD_TRAINING = '[Training] Start Add Training';\nexport const STOP_ADD_TRAINING = '[Training] Stop Add Training';\n\nexport class SetAvailableTrainings implements Action {\n  readonly type = SET_AVAILABLE_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class SetFinishedTrainings implements Action {\n  readonly type = SET_FINISHED_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class StartTraining implements Action {\n  readonly type = START_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\nexport class StopTraining implements Action {\n  readonly type = STOP_TRAINING\n}\n\nexport class StartEditTraining implements Action {\n  readonly type = START_EDIT_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopEditTraining implements Action {\n  readonly type = STOP_EDIT_TRAINING;\n}\n\nexport class StartRemoveTraining implements Action {\n  readonly type = START_REMOVE_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopRemoveTraining implements Action {\n  readonly type = STOP_REMOVE_TRAINING;\n}\n\nexport class StartAddTraining implements Action {\n  readonly type = START_ADD_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopAddTraining implements Action {\n  readonly type = STOP_ADD_TRAINING;\n}\n\n\n\n\nexport type TrainingActions = SetAvailableTrainings | SetFinishedTrainings | StartTraining | StopTraining | StartEditTraining | StopEditTraining | StartRemoveTraining | StopRemoveTraining | StartAddTraining |StopAddTraining;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "START_REMOVE_TRAINING",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "StartTraining",
            "id": "class-StartTraining-c534eb3ceb73c3afb2333836d7363ca6",
            "file": "src/app/training/training.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\nimport { Exercise } from \"./exercise.model\";\n\nexport const SET_AVAILABLE_TRAININGS = '[Training] Set Available Exercises';\nexport const SET_FINISHED_TRAININGS = '[Training] Set Finished Exercises';\nexport const START_TRAINING = '[Training] Start Training';\nexport const STOP_TRAINING = '[Training] Stop Training';\nexport const START_EDIT_TRAINING = '[Training] Start Edit Training';\nexport const STOP_EDIT_TRAINING = '[Training] Stop Edit Training';\nexport const START_REMOVE_TRAINING = '[Training] Start Remove Training';\nexport const STOP_REMOVE_TRAINING = '[Training] Stop Remove Training';\nexport const START_ADD_TRAINING = '[Training] Start Add Training';\nexport const STOP_ADD_TRAINING = '[Training] Stop Add Training';\n\nexport class SetAvailableTrainings implements Action {\n  readonly type = SET_AVAILABLE_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class SetFinishedTrainings implements Action {\n  readonly type = SET_FINISHED_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class StartTraining implements Action {\n  readonly type = START_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\nexport class StopTraining implements Action {\n  readonly type = STOP_TRAINING\n}\n\nexport class StartEditTraining implements Action {\n  readonly type = START_EDIT_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopEditTraining implements Action {\n  readonly type = STOP_EDIT_TRAINING;\n}\n\nexport class StartRemoveTraining implements Action {\n  readonly type = START_REMOVE_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopRemoveTraining implements Action {\n  readonly type = STOP_REMOVE_TRAINING;\n}\n\nexport class StartAddTraining implements Action {\n  readonly type = START_ADD_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopAddTraining implements Action {\n  readonly type = STOP_ADD_TRAINING;\n}\n\n\n\n\nexport type TrainingActions = SetAvailableTrainings | SetFinishedTrainings | StartTraining | StopTraining | StartEditTraining | StopEditTraining | StartRemoveTraining | StopRemoveTraining | StartAddTraining |StopAddTraining;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "START_TRAINING",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "StopAddTraining",
            "id": "class-StopAddTraining-c534eb3ceb73c3afb2333836d7363ca6",
            "file": "src/app/training/training.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\nimport { Exercise } from \"./exercise.model\";\n\nexport const SET_AVAILABLE_TRAININGS = '[Training] Set Available Exercises';\nexport const SET_FINISHED_TRAININGS = '[Training] Set Finished Exercises';\nexport const START_TRAINING = '[Training] Start Training';\nexport const STOP_TRAINING = '[Training] Stop Training';\nexport const START_EDIT_TRAINING = '[Training] Start Edit Training';\nexport const STOP_EDIT_TRAINING = '[Training] Stop Edit Training';\nexport const START_REMOVE_TRAINING = '[Training] Start Remove Training';\nexport const STOP_REMOVE_TRAINING = '[Training] Stop Remove Training';\nexport const START_ADD_TRAINING = '[Training] Start Add Training';\nexport const STOP_ADD_TRAINING = '[Training] Stop Add Training';\n\nexport class SetAvailableTrainings implements Action {\n  readonly type = SET_AVAILABLE_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class SetFinishedTrainings implements Action {\n  readonly type = SET_FINISHED_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class StartTraining implements Action {\n  readonly type = START_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\nexport class StopTraining implements Action {\n  readonly type = STOP_TRAINING\n}\n\nexport class StartEditTraining implements Action {\n  readonly type = START_EDIT_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopEditTraining implements Action {\n  readonly type = STOP_EDIT_TRAINING;\n}\n\nexport class StartRemoveTraining implements Action {\n  readonly type = START_REMOVE_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopRemoveTraining implements Action {\n  readonly type = STOP_REMOVE_TRAINING;\n}\n\nexport class StartAddTraining implements Action {\n  readonly type = START_ADD_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopAddTraining implements Action {\n  readonly type = STOP_ADD_TRAINING;\n}\n\n\n\n\nexport type TrainingActions = SetAvailableTrainings | SetFinishedTrainings | StartTraining | StopTraining | StartEditTraining | StopEditTraining | StartRemoveTraining | StopRemoveTraining | StartAddTraining |StopAddTraining;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "STOP_ADD_TRAINING",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "StopEditTraining",
            "id": "class-StopEditTraining-c534eb3ceb73c3afb2333836d7363ca6",
            "file": "src/app/training/training.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\nimport { Exercise } from \"./exercise.model\";\n\nexport const SET_AVAILABLE_TRAININGS = '[Training] Set Available Exercises';\nexport const SET_FINISHED_TRAININGS = '[Training] Set Finished Exercises';\nexport const START_TRAINING = '[Training] Start Training';\nexport const STOP_TRAINING = '[Training] Stop Training';\nexport const START_EDIT_TRAINING = '[Training] Start Edit Training';\nexport const STOP_EDIT_TRAINING = '[Training] Stop Edit Training';\nexport const START_REMOVE_TRAINING = '[Training] Start Remove Training';\nexport const STOP_REMOVE_TRAINING = '[Training] Stop Remove Training';\nexport const START_ADD_TRAINING = '[Training] Start Add Training';\nexport const STOP_ADD_TRAINING = '[Training] Stop Add Training';\n\nexport class SetAvailableTrainings implements Action {\n  readonly type = SET_AVAILABLE_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class SetFinishedTrainings implements Action {\n  readonly type = SET_FINISHED_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class StartTraining implements Action {\n  readonly type = START_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\nexport class StopTraining implements Action {\n  readonly type = STOP_TRAINING\n}\n\nexport class StartEditTraining implements Action {\n  readonly type = START_EDIT_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopEditTraining implements Action {\n  readonly type = STOP_EDIT_TRAINING;\n}\n\nexport class StartRemoveTraining implements Action {\n  readonly type = START_REMOVE_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopRemoveTraining implements Action {\n  readonly type = STOP_REMOVE_TRAINING;\n}\n\nexport class StartAddTraining implements Action {\n  readonly type = START_ADD_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopAddTraining implements Action {\n  readonly type = STOP_ADD_TRAINING;\n}\n\n\n\n\nexport type TrainingActions = SetAvailableTrainings | SetFinishedTrainings | StartTraining | StopTraining | StartEditTraining | StopEditTraining | StartRemoveTraining | StopRemoveTraining | StartAddTraining |StopAddTraining;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "STOP_EDIT_TRAINING",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "StopLoading",
            "id": "class-StopLoading-37dfa67d956bfd4912bf20c70b4c4653",
            "file": "src/app/shared/ui.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\n\nexport const START_LOADING = '[UI] Start Loading';\nexport const STOP_LOADING = '[UI] Stop Loading';\n\nexport class StartLoading implements Action {\n  readonly type = START_LOADING\n}\n\nexport class StopLoading implements Action {\n  readonly type = STOP_LOADING\n}\n\nexport type UIActions = StartLoading | StopLoading;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "STOP_LOADING",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "StopRemoveTraining",
            "id": "class-StopRemoveTraining-c534eb3ceb73c3afb2333836d7363ca6",
            "file": "src/app/training/training.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\nimport { Exercise } from \"./exercise.model\";\n\nexport const SET_AVAILABLE_TRAININGS = '[Training] Set Available Exercises';\nexport const SET_FINISHED_TRAININGS = '[Training] Set Finished Exercises';\nexport const START_TRAINING = '[Training] Start Training';\nexport const STOP_TRAINING = '[Training] Stop Training';\nexport const START_EDIT_TRAINING = '[Training] Start Edit Training';\nexport const STOP_EDIT_TRAINING = '[Training] Stop Edit Training';\nexport const START_REMOVE_TRAINING = '[Training] Start Remove Training';\nexport const STOP_REMOVE_TRAINING = '[Training] Stop Remove Training';\nexport const START_ADD_TRAINING = '[Training] Start Add Training';\nexport const STOP_ADD_TRAINING = '[Training] Stop Add Training';\n\nexport class SetAvailableTrainings implements Action {\n  readonly type = SET_AVAILABLE_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class SetFinishedTrainings implements Action {\n  readonly type = SET_FINISHED_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class StartTraining implements Action {\n  readonly type = START_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\nexport class StopTraining implements Action {\n  readonly type = STOP_TRAINING\n}\n\nexport class StartEditTraining implements Action {\n  readonly type = START_EDIT_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopEditTraining implements Action {\n  readonly type = STOP_EDIT_TRAINING;\n}\n\nexport class StartRemoveTraining implements Action {\n  readonly type = START_REMOVE_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopRemoveTraining implements Action {\n  readonly type = STOP_REMOVE_TRAINING;\n}\n\nexport class StartAddTraining implements Action {\n  readonly type = START_ADD_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopAddTraining implements Action {\n  readonly type = STOP_ADD_TRAINING;\n}\n\n\n\n\nexport type TrainingActions = SetAvailableTrainings | SetFinishedTrainings | StartTraining | StopTraining | StartEditTraining | StopEditTraining | StartRemoveTraining | StopRemoveTraining | StartAddTraining |StopAddTraining;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "STOP_REMOVE_TRAINING",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "StopTraining",
            "id": "class-StopTraining-c534eb3ceb73c3afb2333836d7363ca6",
            "file": "src/app/training/training.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\nimport { Exercise } from \"./exercise.model\";\n\nexport const SET_AVAILABLE_TRAININGS = '[Training] Set Available Exercises';\nexport const SET_FINISHED_TRAININGS = '[Training] Set Finished Exercises';\nexport const START_TRAINING = '[Training] Start Training';\nexport const STOP_TRAINING = '[Training] Stop Training';\nexport const START_EDIT_TRAINING = '[Training] Start Edit Training';\nexport const STOP_EDIT_TRAINING = '[Training] Stop Edit Training';\nexport const START_REMOVE_TRAINING = '[Training] Start Remove Training';\nexport const STOP_REMOVE_TRAINING = '[Training] Stop Remove Training';\nexport const START_ADD_TRAINING = '[Training] Start Add Training';\nexport const STOP_ADD_TRAINING = '[Training] Stop Add Training';\n\nexport class SetAvailableTrainings implements Action {\n  readonly type = SET_AVAILABLE_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class SetFinishedTrainings implements Action {\n  readonly type = SET_FINISHED_TRAININGS;\n  constructor(\n    public payload: Exercise[]\n  ) { }\n}\n\nexport class StartTraining implements Action {\n  readonly type = START_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\nexport class StopTraining implements Action {\n  readonly type = STOP_TRAINING\n}\n\nexport class StartEditTraining implements Action {\n  readonly type = START_EDIT_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopEditTraining implements Action {\n  readonly type = STOP_EDIT_TRAINING;\n}\n\nexport class StartRemoveTraining implements Action {\n  readonly type = START_REMOVE_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopRemoveTraining implements Action {\n  readonly type = STOP_REMOVE_TRAINING;\n}\n\nexport class StartAddTraining implements Action {\n  readonly type = START_ADD_TRAINING;\n  constructor(\n    public payload: string\n  ) { }\n}\n\n\nexport class StopAddTraining implements Action {\n  readonly type = STOP_ADD_TRAINING;\n}\n\n\n\n\nexport type TrainingActions = SetAvailableTrainings | SetFinishedTrainings | StartTraining | StopTraining | StartEditTraining | StopEditTraining | StartRemoveTraining | StopRemoveTraining | StartAddTraining |StopAddTraining;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "STOP_TRAINING",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-29c336f3b29586e6229a3a20a4c186ec",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "openSidenav",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './auth/auth.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  constructor(private authService: AuthService) {}\n\n  openSidenav = false;\n\n  ngOnInit(){\n    this.authService.initAuthListener();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-sidenav-container,mat-sidenav-content, mat-sidenav {\n  height: 100%\n}\n\nmat-sidenav {\n  width: 250px;\n}\n\na {\n  text-decoration: none;\n  color: white;\n}\n\na:hover, a:active {\n  color: gray;\n}\n\n",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-sidenav-container>\n  <mat-sidenav #sidenav role=\"navigation\">\n    <app-sidenav-list (sidenavClose)=\"sidenav.close()\"></app-sidenav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <app-header (sidenavToggle)=\"sidenav.toggle()\"></app-header>\n    <main>\n      <router-outlet></router-outlet>\n    </main>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CurrentTrainingComponent",
            "id": "component-CurrentTrainingComponent-9944645e3994e79e8faa26bf10251a63",
            "file": "src/app/training/current-training/current-training.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-current-training",
            "styleUrls": [
                "./current-training.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./current-training.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progress",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "timer",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onStop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "startOrResumeTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component,  OnInit  } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Store } from '@ngrx/store';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { StopTrainingComponent } from '../stop-training/stop-training.component';\nimport { TrainingService } from '../training.service';\nimport * as fromTraining from '../training.reducer';\n\n@Component({\n  selector: 'app-current-training',\n  templateUrl: './current-training.component.html',\n  styleUrls: ['./current-training.component.css']\n})\nexport class CurrentTrainingComponent implements OnInit {\n\n  progress = 0;\n  timer: number;\n\n  constructor(\n    private dialog: MatDialog,\n    private trainingService: TrainingService,\n    private store: Store<fromTraining.State>,\n  ) { }\n\n  ngOnInit(): void {\n   this.startOrResumeTimer();\n  }\n\n  startOrResumeTimer() {\n    this.store.select(fromTraining.getActiveTrainings).pipe(take(1)).subscribe(\n      ex => {\n        const step = ex.duration / 100 * 1000;\n        this.timer = window.setInterval(()=> {\n          this.progress = this.progress + 5\n          if (this.progress >=100) {\n            this.trainingService.completeExercise();\n            clearInterval(this.timer);\n          }\n        },step)\n      }\n    )\n  }\n\n  onStop(){\n    clearInterval(this.timer);\n    const dialogRef = this.dialog.open(StopTrainingComponent, {data: {progress: this.progress}})\n\n    dialogRef.afterClosed()\n    .subscribe(result => {\n      if (result){\n        this.trainingService.cancelExercise(this.progress)\n      }\n      else {\n        this.startOrResumeTimer()\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".current-training {\n  padding: 40px;\n}\n",
                    "styleUrl": "./current-training.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "trainingService",
                        "type": "TrainingService"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "trainingService",
                        "type": "TrainingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"current-training\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <mat-progress-spinner mode=\"determinate\" [value]=\"progress\"></mat-progress-spinner>\n  <h1>{{ progress }} %</h1>\n  <p>Keep on going, You can do it !</p>\n  <button mat-raised-button color=\"accent\" (click)=\"onStop()\">Stop</button>\n</section>\n"
        },
        {
            "name": "DeleteTrainingComponent",
            "id": "component-DeleteTrainingComponent-718bce0d1006c6d9aea7db731e2ca158",
            "file": "src/app/setting/delete-training/delete-training.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-training",
            "styleUrls": [
                "./delete-training.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-training.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "passedData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-delete-training',\n  templateUrl: './delete-training.component.html',\n  styleUrls: ['./delete-training.component.css']\n})\nexport class DeleteTrainingComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public passedData: any) { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./delete-training.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "passedData",
                        "type": "any"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "passedData",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 mat-dialog-title>Are you sure ?</h1>\n<mat-dialog-content>\n  <p>You want to delete {{ passedData.exercise.name }}</p>\n</mat-dialog-content>\n  <mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"true\">Yes</button>\n    <button mat-button [mat-dialog-close]=\"false\">No</button>\n  </mat-dialog-actions>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-5816d781d4ad09fdff8f46a01beb1d49-1",
            "file": "src/app/navigation/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "sidenavToggle",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isAuth$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "onToggleSidenav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { Observable } from 'rxjs'\nimport { Store } from '@ngrx/store';\nimport * as fromRoot from '../../app.reducer';\nimport { AuthService } from 'src/app/auth/auth.service';\n\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  @Output()\n  sidenavToggle = new EventEmitter<void>();\n\n  isAuth$: Observable<boolean>;\n\n  constructor(\n    private authService: AuthService,\n    private store:Store<fromRoot.State>,\n  ) { }\n\n  ngOnInit(): void {\n    this.isAuth$ = this.store.select(fromRoot.getIsAuth)\n  }\n\n  onToggleSidenav() {\n    this.sidenavToggle.emit()\n  }\n\n  onLogout() {\n    this.authService.logout();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "a {\n  text-decoration: none;\n  color: white;\n}\n\na:hover, a:active {\n  color: gray;\n}\n\n.navigation-items {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromRoot.State>"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromRoot.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<mat-toolbar color=\"primary\">\n  <div fxHide.gt-xs>\n    <button mat-icon-button (click)=\"onToggleSidenav()\">\n      <mat-icon>\n        menu\n      </mat-icon>\n    </button>\n  </div>\n  <div>\n    <a routerLink=\"/\">Angular Fitness</a>\n  </div>\n  <div fxFlex fxLayout fxLayoutAlign=\"flex-end\" fxHide.xs>\n    <ul fxLayout fxLayoutGap=\"10px\" class=\"navigation-items\">\n      <li *ngIf=\"!(isAuth$ | async)\">\n        <a routerLink=\"/signup\">Signup</a>\n      </li>\n      <li *ngIf=\"!(isAuth$ | async)\">\n        <a routerLink=\"/login\">LogIn</a>\n      </li>\n      <li *ngIf=\"isAuth$ | async\">\n        <a routerLink=\"/training\">Training</a>\n      </li>\n      <li *ngIf=\"isAuth$ | async\">\n        <a routerLink=\"/settings\">Settings</a>\n      </li>\n      <li *ngIf=\"isAuth$ | async\">\n        <a style=\"cursor: pointer\" (click)=\"onLogout()\">LogOut</a>\n      </li>\n    </ul>\n  </div>\n</mat-toolbar>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-9f8840a8af11dcced59260bea5f67099",
            "file": "src/app/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { _MatTabGroupBase } from '@angular/material/tabs';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../auth.service';\nimport * as fromRoot from '../../app.reducer'\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private store: Store<fromRoot.State>,\n    ) { }\n\n  ngOnInit(): void {\n    this.isLoading$ = this.store.select(fromRoot.getIsLoading);\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    })\n  }\n\n  get getControl(){\n    return this.loginForm.controls;\n  }\n\n  onSubmit() {\n    this.authService.login({\n      email: this.loginForm.value.email,\n      password: this.loginForm.value.password\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field {\n  width: 300px;\n}\n",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromRoot.State>"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromRoot.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getControl": {
                    "name": "getControl",
                    "getSignature": {
                        "name": "getControl",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                }
            },
            "templateData": "<section>\n  <form fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field>\n      <input\n        type=\"email\"\n        matInput placeholder=\"Your email\"\n        formControlName=\"email\"\n        email required>\n        <mat-error>Invalid login email</mat-error>\n        <mat-hint>Please enter your login email</mat-hint>\n    </mat-form-field>\n    <mat-form-field>\n      <input type=\"password\" matInput placeholder=\"Your password\" formControlName=\"password\">\n      <mat-hint>Please enter your password </mat-hint>\n      <mat-error>Missing password</mat-error>\n    </mat-form-field>\n     <button *ngIf=\"!(isLoading$ | async)\"type=\"submit\" mat-raised-button color=\"primary\" [disabled]=\"loginForm.invalid\" >Submit</button>\n     <mat-spinner *ngIf=\"isLoading$ | async\"></mat-spinner>\n  </form>\n</section>\n"
        },
        {
            "name": "NewTrainingComponent",
            "id": "component-NewTrainingComponent-55d563b837c3cda0b00881adb013980c",
            "file": "src/app/training/new-training/new-training.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-training",
            "styleUrls": [
                "./new-training.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./new-training.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "exercises$",
                    "type": "Observable<Exercise[]>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isLoading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchExercises",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onStartTraining",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit} from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { TrainingService } from '../training.service';\nimport { Exercise } from '../exercise.model';\nimport * as fromRoot from '../../app.reducer';\nimport * as fromTraining from '../training.reducer';\nimport { Store } from '@ngrx/store';\n\n@Component({\n  selector: 'app-new-training',\n  templateUrl: './new-training.component.html',\n  styleUrls: ['./new-training.component.css']\n})\nexport class NewTrainingComponent implements OnInit {\n  exercises$: Observable<Exercise[]>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    private trainingService: TrainingService,\n    private store: Store<fromTraining.State>,\n    ) {  }\n\n  ngOnInit(): void {\n    this.isLoading$ = this.store.select(fromRoot.getIsLoading);\n    this.exercises$ = this.store.select(fromTraining.getAvailableExercises)\n  }\n\n  onStartTraining(form: NgForm) {\n    this.trainingService.startExercise(form.value.exercise);\n  }\n\n  fetchExercises(){\n    this.exercises$ = this.store.select(fromTraining.getAvailableExercises)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".new-training {\n  padding: 40px\n}\n",
                    "styleUrl": "./new-training.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "trainingService",
                        "type": "TrainingService"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "trainingService",
                        "type": "TrainingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"new-training\" fxLayout fxLayoutAlign=\"center\">\n  <form (ngSubmit)=\"onStartTraining(f)\" #f=\"ngForm\">\n  <mat-card fxFlex.xs=\"100%\" fxFlex=\"400px\">\n    <mat-card-title fxLayoutAlign=\"center\"> Time to start a WorkOut</mat-card-title>\n    <mat-card-content fxLayoutAlign=\"center\">\n      <mat-form-field *ngIf=\"!(isLoading$ | async) && exercises$ | async\">\n        <mat-select placeholder=\"Select type of training\" ngModel name=\"exercise\" required>\n          <mat-option  *ngFor=\"let exercise of (exercises$ | async)\" [value]=\"exercise.id\">  {{ exercise.name }} </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-spinner *ngIf=\"isLoading$ | async\"></mat-spinner>\n    </mat-card-content>\n    <mat-card-actions fxLayoutAlign=\"center\" *ngIf=\"!(isLoading$ | async)\">\n      <button *ngIf=\"exercises$ | async\" mat-button type=\"submit\" [disabled]=\"f.invalid\" >Start</button>\n      <button *ngIf=\"!(exercises$ | async)\" mat-button type=\"button\" (click)=\"fetchExercises()\">Fetch Again</button>\n    </mat-card-actions>\n  </mat-card>\n</form>\n</section>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PastTrainingsComponent",
            "id": "component-PastTrainingsComponent-9dc424f57cc09bef4963294d780f3059",
            "file": "src/app/training/past-trainings/past-trainings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-past-trainings",
            "styleUrls": [
                "./past-trainings.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./past-trainings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<Exercise>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['date','name','duration','calories','state']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "paginator",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ]
                },
                {
                    "name": "sort",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "doFilter",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Exercise } from '../exercise.model';\nimport { TrainingService } from '../training.service';\nimport * as fromTraining from '../training.reducer';\nimport { Store } from '@ngrx/store';\n\n@Component({\n  selector: 'app-past-trainings',\n  templateUrl: './past-trainings.component.html',\n  styleUrls: ['./past-trainings.component.css']\n})\nexport class PastTrainingsComponent implements OnInit,AfterViewInit {\n  displayedColumns = ['date','name','duration','calories','state'];\n  dataSource = new MatTableDataSource<Exercise>();\n\n  @ViewChild(MatSort) sort: MatSort;\n\n  @ViewChild(MatPaginator)  paginator: MatPaginator;\n\n  constructor(private trainingService: TrainingService,\n    private store: Store<fromTraining.State>) { }\n\n  ngOnInit(): void {\n    this.store.select(fromTraining.getFinishedExercise).subscribe(\n      ex => {\n        this.dataSource.data= ex;}\n    );\n    this.trainingService.fetchCompletedOrCancelledExercises();\n  }\n\n  ngAfterViewInit(){\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n\n  doFilter($event){\n    this.dataSource.filter = $event.target.value.trim().toLowerCase();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./past-trainings.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "trainingService",
                        "type": "TrainingService"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "trainingService",
                        "type": "TrainingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div fxLayoutAlign=\"center center\">\n<mat-form-field fxFlex=\"40%\">\n  <input matInput type=\"text\" (keyup)=\"doFilter($event)\" placeholder=\"Filter\">\n</mat-form-field>\n</div>\n<mat-table [dataSource]=\"dataSource\" matSort>\n  <ng-container matColumnDef=\"date\">\n    <mat-header-cell *matHeaderCellDef mat-sort-header>Date</mat-header-cell>\n    <mat-cell *matCellDef=\"let element\">{{ element.date.toMillis() | date }}</mat-cell>\n  </ng-container>\n  <ng-container matColumnDef=\"name\">\n    <mat-header-cell *matHeaderCellDef mat-sort-header>Name</mat-header-cell>\n    <mat-cell *matCellDef=\"let element\">{{ element.name }}</mat-cell>\n  </ng-container>\n  <ng-container matColumnDef=\"calories\">\n    <mat-header-cell *matHeaderCellDef mat-sort-header>calories</mat-header-cell>\n    <mat-cell *matCellDef=\"let element\">{{ element.calories | number  }}</mat-cell>\n  </ng-container>\n  <ng-container matColumnDef=\"duration\">\n    <mat-header-cell *matHeaderCellDef mat-sort-header>Duration</mat-header-cell>\n    <mat-cell *matCellDef=\"let element\">{{ element.duration | number }}</mat-cell>\n  </ng-container>\n  <ng-container matColumnDef=\"state\">\n    <mat-header-cell *matHeaderCellDef mat-sort-header>State</mat-header-cell>\n    <mat-cell *matCellDef=\"let element\">{{ element.state }}</mat-cell>\n  </ng-container>\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n  <mat-row *matRowDef=\"let row;columns: displayedColumns;\"></mat-row>\n</mat-table>\n<mat-paginator #paginator [pageSize]=\"10\" [pageSizeOptions]=\"[5,10,20]\"></mat-paginator>\n"
        },
        {
            "name": "SettingComponent",
            "id": "component-SettingComponent-f78301ab495e903587f313276c910086",
            "file": "src/app/setting/setting.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-setting",
            "styleUrls": [
                "./setting.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./setting.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "exercises$",
                    "type": "Observable<Exercise[]>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isLoading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "onEditingTraining$",
                    "type": "Observable<Exercise>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchExercises",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onEditTraining",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { TrainingService } from '../training/training.service';\nimport * as fromTraining from '../training/training.reducer'\nimport * as fromRoot from '../app.reducer'\nimport { NgForm } from '@angular/forms';\nimport { Exercise } from '../training/exercise.model';\n\n@Component({\n  selector: 'app-setting',\n  templateUrl: './setting.component.html',\n  styleUrls: ['./setting.component.css']\n})\nexport class SettingComponent implements OnInit {\n  exercises$: Observable<Exercise[]>;\n  isLoading$: Observable<boolean>;\n  onEditingTraining$: Observable<Exercise>;\n\n  constructor(\n    private trainingService: TrainingService,\n    private store: Store<fromTraining.State>,\n    ) {  }\n\n\n    ngOnInit(): void {\n      this.isLoading$ = this.store.select(fromRoot.getIsLoading);\n      this.onEditingTraining$ = this.store.select(fromTraining.getEditingTraining);\n      this.exercises$ = this.store.select(fromTraining.getAvailableExercises)\n    }\n\n    onEditTraining(form: NgForm) {\n      this.trainingService.EditTraining(form.value.exercise);\n    }\n\n    fetchExercises(){\n      this.exercises$ = this.store.select(fromTraining.getAvailableExercises)\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./setting.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "trainingService",
                        "type": "TrainingService"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "trainingService",
                        "type": "TrainingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"new-training\" fxLayout fxLayoutAlign=\"center\" *ngIf=\"!(onEditingTraining$ | async)\">\n  <form (ngSubmit)=\"onEditTraining(f)\" #f=\"ngForm\">\n  <mat-card fxFlex.xs=\"100%\" fxFlex=\"400px\">\n    <mat-card-title fxLayoutAlign=\"center\"> Select a Workout to Edit</mat-card-title>\n    <mat-card-content fxLayoutAlign=\"center\">\n      <mat-form-field *ngIf=\"!(isLoading$ | async) && exercises$ | async\">\n        <mat-select placeholder=\"Select type of training\" ngModel name=\"exercise\" required>\n          <mat-option  *ngFor=\"let exercise of (exercises$ | async)\" [value]=\"exercise.id\">  {{ exercise.name }} </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-spinner *ngIf=\"isLoading$ | async\"></mat-spinner>\n    </mat-card-content>\n    <mat-card-actions fxLayoutAlign=\"center\" *ngIf=\"!(isLoading$ | async)\">\n      <button mat-fab color=\"primary\" *ngIf=\"exercises$ | async\" mat-button type=\"submit\" [disabled]=\"f.invalid\" ><mat-icon>edit</mat-icon></button>\n      <button *ngIf=\"!(exercises$ | async)\" mat-button type=\"button\" (click)=\"fetchExercises()\">Fetch Again</button>\n    </mat-card-actions>\n  </mat-card>\n</form>\n</section>\n<app-set-training *ngIf=\"onEditingTraining$ | async\"></app-set-training>\n<section class=\"buttons\" fxLayout fxLayoutAlign=\"center\">\n  <app-add-training></app-add-training>\n  <app-remove-training></app-remove-training>\n</section>\n"
        },
        {
            "name": "SetTrainingComponent",
            "id": "component-SetTrainingComponent-c8ab5823d1dc360f075f2d166ce4ceb5",
            "file": "src/app/setting/set-training/set-training.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-set-training",
            "styleUrls": [
                "./set-training.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./set-training.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editingExercise",
                    "type": "Exercise",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "exerciseForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "newExerciseToSave",
                    "defaultValue": "{\n    id: '',\n    name: '',\n    calories: 1,\n    duration: 1\n  }",
                    "type": "Exercise",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "addExercise",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "deleteExercise",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { Exercise } from 'src/app/training/exercise.model';\nimport { TrainingService } from 'src/app/training/training.service';\nimport * as fromTraining from '../../training/training.reducer'\nimport * as Training from '../../training/training.actions';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DeleteTrainingComponent } from '../delete-training/delete-training.component';\n\n@Component({\n  selector: 'app-set-training',\n  templateUrl: './set-training.component.html',\n  styleUrls: ['./set-training.component.css']\n})\nexport class SetTrainingComponent implements OnInit {\n  editingExercise: Exercise;\n\n  newExerciseToSave: Exercise = {\n    id: '',\n    name: '',\n    calories: 1,\n    duration: 1\n  }\n  exerciseForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private store: Store<fromTraining.State>,\n    private trainingService: TrainingService,\n    private dialog: MatDialog,\n  ) { }\n\n  ngOnInit(): void {\n    this.editingExercise = this.trainingService.getEditingTraining();\n    this.exerciseForm = this.formBuilder.group({\n      name: [this.editingExercise.name, [Validators.required]],\n      duration: [this.editingExercise.duration, [Validators.required]],\n      calories: [this.editingExercise.calories, Validators.required],\n    })\n  }\n\n  onSubmit(): void {\n    this.newExerciseToSave.name = this.exerciseForm.value.name;\n    this.newExerciseToSave.calories = this.exerciseForm.value.calories;\n    this.newExerciseToSave.duration = this.exerciseForm.value.duration;\n    this.newExerciseToSave.id = this.editingExercise.id;\n    this.trainingService.updateDatabaseWith(this.newExerciseToSave);\n  }\n\n  deleteExercise(){\n    const dialogRef = this.dialog.open(DeleteTrainingComponent, {data: {exercise: this.editingExercise}})\n    dialogRef.afterClosed()\n    .subscribe(result => {\n      if (result){\n        this.store.dispatch(new Training.StartRemoveTraining(this.editingExercise.id));\n        this.trainingService.removeExerciseFromDatabase(this.editingExercise)\n        this.store.dispatch(new Training.StopRemoveTraining());\n      }\n    });\n  }\n\n  addExercise(){\n    this.store.dispatch(new Training.StartAddTraining(this.editingExercise.id));\n    this.trainingService.addExerciseToDatabase(this.editingExercise);\n    this.store.dispatch(new Training.StopAddTraining());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".set-training {\n  padding: 40px;\n}\n\n.name {\n  width: 300px;\n}\n",
                    "styleUrl": "./set-training.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>"
                    },
                    {
                        "name": "trainingService",
                        "type": "TrainingService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "trainingService",
                        "type": "TrainingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"set-training\" fxLayout=\"column\" fxLayoutAlign=\"center center\"\n>\n  <mat-card fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <form fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\" [formGroup]=\"exerciseForm\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field>\n      <input matInput class=\"name\" type=\"text\" formControlName=\"name\" required>\n      <mat-hint>Name</mat-hint>\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput class=\"duration\" type=\"number\" formControlName=\"duration\" min=1 required>\n      <mat-hint>Duration</mat-hint>\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput class=\"calories\" type=\"number\" formControlName=\"calories\" min=1 required>\n      <mat-hint>Calories</mat-hint>\n    </mat-form-field>\n    <section>\n      <button mat-fab color=\"primary\" type=\"submit\" [disabled]=\"!exerciseForm.valid\"><mat-icon>done</mat-icon></button>\n      <button mat-fab color=\"primary\" (click)=\"deleteExercise()\"><mat-icon>delete</mat-icon></button>\n      <button mat-fab color=\"primary\" (click)=\"addExercise()\"><mat-icon>add</mat-icon></button>\n    </section>\n  </form>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "SidenavListComponent",
            "id": "component-SidenavListComponent-c50d334b539a0acd7a8825486ed5d37e",
            "file": "src/app/navigation/sidenav-list/sidenav-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidenav-list",
            "styleUrls": [
                "./sidenav-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sidenav-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "sidenavClose",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isAuth$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport * as fromRoot from '../../app.reducer';\n\n@Component({\n  selector: 'app-sidenav-list',\n  templateUrl: './sidenav-list.component.html',\n  styleUrls: ['./sidenav-list.component.css']\n})\nexport class SidenavListComponent implements OnInit {\n\n  @Output()\n  sidenavClose = new EventEmitter<void>()\n\n  isAuth$: Observable<boolean>;\n\n  constructor(private authService: AuthService,\n    private store: Store<fromRoot.State>) { }\n\n  ngOnInit(): void {\n    this.isAuth$ = this.store.select(fromRoot.getIsAuth);\n  }\n\n  onClose() {\n    this.sidenavClose.emit()\n  }\n\n  onLogout() {\n    this.authService.logout();\n    this.onClose();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "a {\n  text-decoration: none;\n  color: white;\n}\n\na:hover, a:active {\n  color: gray;\n}\n\n.nav-caption {\n  display: inline-block;\n  padding-left: 6px;\n}\n\n\n\n",
                    "styleUrl": "./sidenav-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromRoot.State>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromRoot.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-nav-list>\n  <a mat-list-item routerLink=\"/signup\" (click)=\"onClose()\" *ngIf=\"!(isAuth$ | async)\">\n    <mat-icon>person_add</mat-icon>\n    <span class=\"nav-caption\">Signup</span>\n  </a>\n  <a mat-list-item routerLink=\"/login\" (click)=\"onClose()\" *ngIf=\"!(isAuth$ | async)\">\n    <mat-icon>person</mat-icon>\n    <span class=\"nav-caption\">LogIn</span></a>\n  <a mat-list-item routerLink=\"/training\" (click)=\"onClose()\" *ngIf=\"isAuth$\">\n    <mat-icon>fitness_center</mat-icon>\n    <span class=\"nav-caption\">Training</span></a>\n  <a mat-list-item routerLink=\"/settings\" (click)=\"onClose()\" *ngIf=\"isAuth$\">\n    <mat-icon>settings</mat-icon>\n    <span class=\"nav-caption\">Setings</span></a>\n  <mat-list-item (click)=\"onLogout()\" *ngIf=\"isAuth$ | async\">\n    <button mat-icon-button>\n      <mat-icon>eject</mat-icon>\n      <span class=\"nav-caption\">LogOut</span>\n    </button>\n  </mat-list-item>\n</mat-nav-list>\n"
        },
        {
            "name": "SignupComponent",
            "id": "component-SignupComponent-ea12333f0797518d47341ecdd81c5fad",
            "file": "src/app/auth/signup/signup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signup",
            "styleUrls": [
                "./signup.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./signup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "maxDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "signUpForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup,Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { UIService } from 'src/app/shared/ui.service';\nimport { AuthService } from '../auth.service';\nimport * as fromRoot from '../../app.reducer';\nimport { Store } from '@ngrx/store';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  signUpForm: FormGroup;\n  maxDate: Date;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private uiservice: UIService,\n    private store: Store<fromRoot.State>,\n    )\n    { }\n\n  ngOnInit(): void {\n    this.isLoading$ = this.store.select(fromRoot.getIsLoading)\n    this.maxDate = new Date();\n    this.maxDate.setFullYear(this.maxDate.getFullYear()-18);\n    this.signUpForm = this.formBuilder.group({\n      email: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n      birthdate: ['',Validators.required],\n      agree: ['',Validators.required],\n    })\n  }\n\n  get getControl(){\n    return this.signUpForm.controls;\n  }\n\n  onSubmit() {\n    this.authService.registerUser({\n      email: this.signUpForm.value.email,\n      password: this.signUpForm.value.password\n    })\n    this.isLoading$ = this.store.select(fromRoot.getIsLoading)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field {\n    width: 300px;\n}",
                    "styleUrl": "./signup.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "uiservice",
                        "type": "UIService"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromRoot.State>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "uiservice",
                        "type": "UIService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromRoot.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "getControl": {
                    "name": "getControl",
                    "getSignature": {
                        "name": "getControl",
                        "type": "",
                        "returnType": "",
                        "line": 39
                    }
                }
            },
            "templateData": "<section>\n  <form fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\" [formGroup]=\"signUpForm\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field>\n      <input\n        type=\"email\"\n        matInput placeholder=\"Your email\"\n        formControlName=\"email\"\n        class=\"form-control\"\n        email required>\n        <mat-error *ngIf=\"!signUpForm.hasError('required') && signUpForm.value.email.length>0\">E-mail is invalid</mat-error>\n        <mat-error *ngIf=\"signUpForm.value.email.length==0\">Field must not be empty</mat-error>\n    </mat-form-field>\n    <mat-form-field hintLabel=\"Should be at least 6 characters long\">\n      <input type=\"password\" matInput placeholder=\"Your password\" formControlName=\"password\" minlength=\"6\">\n      <mat-hint align=\"end\"> {{ signUpForm.value.password.length }} /6 </mat-hint>\n      <mat-error>Has to be at least 6 characters long.</mat-error>\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput placeholder=\"Your Birthdate\" [matDatepicker]=\"picker\" [max]=\"maxDate\" formControlName=\"birthdate\">\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n    <mat-checkbox name=\"agree\" formControlName=\"agree\" color=\"primary\"> Agree to Terms and Conditions </mat-checkbox>\n    <button *ngIf=\"!(isLoading$ |async)\"type=\"submit\" mat-raised-button color=\"primary\" [disabled]=\"signUpForm.invalid\" >Submit</button>\n    <mat-spinner *ngIf=\"isLoading$ |async\"></mat-spinner>\n  </form>\n</section>\n"
        },
        {
            "name": "StopTrainingComponent",
            "id": "component-StopTrainingComponent-036b74dbe040dccd16bbcdce718411e1",
            "file": "src/app/training/stop-training/stop-training.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stop-training",
            "styleUrls": [
                "./stop-training.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./stop-training.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "passedData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core'\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n\n\n@Component({\n  selector: 'app-stop-training',\n  templateUrl: './stop-training.component.html',\n  styleUrls: ['./stop-training.component.css']\n})\nexport class StopTrainingComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public passedData: any) { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./stop-training.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "passedData",
                        "type": "any"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "passedData",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 mat-dialog-title>Are you sure ?</h1>\n<mat-dialog-content>\n  <p>You already got {{ passedData.progress }} %</p>\n</mat-dialog-content>\n  <mat-dialog-actions>\n    <button mat-button [mat-dialog-close]=\"true\">Yes</button>\n    <button mat-button [mat-dialog-close]=\"false\">No</button>\n  </mat-dialog-actions>\n"
        },
        {
            "name": "TrainingComponent",
            "id": "component-TrainingComponent-27a465c8efa57fa103ffe58f2abb5e15",
            "file": "src/app/training/training.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-training",
            "styleUrls": [
                "./training.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./training.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ongoingTraining$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport * as fromTraining from './training.reducer'\nimport { Store } from '@ngrx/store';\nimport { TrainingService } from './training.service';\n\n@Component({\n  selector: 'app-training',\n  templateUrl: './training.component.html',\n  styleUrls: ['./training.component.css']\n})\nexport class TrainingComponent implements OnInit {\n  ongoingTraining$: Observable<boolean>;\n\n  constructor(\n    private store: Store<fromTraining.State>,\n    private trainingService: TrainingService,\n    ) { }\n\n  ngOnInit(): void {\n    this.trainingService.fetchAvailableExercises();\n    this.ongoingTraining$ = this.store.select(fromTraining.getIsTraining);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./training.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>"
                    },
                    {
                        "name": "trainingService",
                        "type": "TrainingService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<fromTraining.State>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "trainingService",
                        "type": "TrainingService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-tab-group *ngIf=\"!(ongoingTraining$ |async)\">\n  <mat-tab label=\"New Exercise\">\n    <app-new-training></app-new-training>\n  </mat-tab>\n  <mat-tab label=\"Past Exercises\">\n    <app-past-trainings></app-past-trainings>\n  </mat-tab>\n</mat-tab-group>\n<app-current-training *ngIf=\"ongoingTraining$ | async\"></app-current-training>\n"
        },
        {
            "name": "WelcomeComponent",
            "id": "component-WelcomeComponent-b4208f3cd11d14f89264cc550ee66c18",
            "file": "src/app/welcome/welcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-welcome",
            "styleUrls": [
                "./welcome.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./welcome.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-welcome',\n  templateUrl: './welcome.component.html',\n  styleUrls: ['./welcome.component.css']\n})\nexport class WelcomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".welcome {\n  text-align: center;\n}\n",
                    "styleUrl": "./welcome.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"welcome\" fxLayout=\"column\" fxLayout.gt-md=\"row\" fxLayoutAlign=\"center center\">\n  <section>\n    <h1>ACTIVITY</h1>\n    <p>\n      Stay active and enjoy better health and more fun !\n    </p>\n  </section>\n  <section>\n    <h1>COMMUNITY</h1>\n    <p>\n      Get to know other people who share your passion\n    </p>\n  </section>\n  <section>\n    <h1>CHALLENGES</h1>\n    <p>\n      Never stop ! Dive into new challenges every day\n    </p>\n  </section>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "TrainingService"
                        },
                        {
                            "name": "UIService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "SidenavListComponent"
                        },
                        {
                            "name": "WelcomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "SettingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "SignupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DeleteTrainingComponent"
                        },
                        {
                            "name": "SetTrainingComponent"
                        },
                        {
                            "name": "SettingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SettingsRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TrainingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CurrentTrainingComponent"
                        },
                        {
                            "name": "NewTrainingComponent"
                        },
                        {
                            "name": "PastTrainingsComponent"
                        },
                        {
                            "name": "StopTrainingComponent"
                        },
                        {
                            "name": "TrainingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TrainingRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TrainingRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  firebase: {\n    apiKey: \"AIzaSyA92mcgAlAyhViUexZ-i18OhCkcVtpgHA4\",\n    authDomain: \"fitness-tracker-bcc28.firebaseapp.com\",\n    projectId: \"fitness-tracker-bcc28\",\n    storageBucket: \"fitness-tracker-bcc28.appspot.com\",\n    messagingSenderId: \"329650194168\",\n    appId: \"1:329650194168:web:fbf1c49ca965e7477e1d0d\"\n  }\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  firebase: {\n    apiKey: \"AIzaSyA92mcgAlAyhViUexZ-i18OhCkcVtpgHA4\",\n    authDomain: \"fitness-tracker-bcc28.firebaseapp.com\",\n    projectId: \"fitness-tracker-bcc28\",\n    storageBucket: \"fitness-tracker-bcc28.appspot.com\",\n    messagingSenderId: \"329650194168\",\n    appId: \"1:329650194168:web:fbf1c49ca965e7477e1d0d\"\n  }\n}"
            },
            {
                "name": "getActiveTrainings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.activeTraining)"
            },
            {
                "name": "getAddingTraining",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.addingTraining)"
            },
            {
                "name": "getAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.reducer.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<fromAuth.State>('auth')"
            },
            {
                "name": "getAvailableExercises",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.availableExercises)"
            },
            {
                "name": "getEditingTraining",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.editingTraining)"
            },
            {
                "name": "getFinishedExercise",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.finishedExercises)"
            },
            {
                "name": "getIsAuth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(getAuthState,fromAuth.getIsAuth)"
            },
            {
                "name": "getIsEditing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.editingTraining != null)"
            },
            {
                "name": "getIsLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(getUiState,fromUI.getIsLoading)"
            },
            {
                "name": "getIsLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui.reducer.ts",
                "type": "",
                "defaultValue": "(state:State) => state.isLoading"
            },
            {
                "name": "getIsTraining",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.activeTraining != null)"
            },
            {
                "name": "getRemovingTraining",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.removingTraining)"
            },
            {
                "name": "getTrainingState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.reducer.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<TrainingState>('training')"
            },
            {
                "name": "getUiState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.reducer.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<fromUI.State>('ui')"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/auth.reducer.ts",
                "type": "State",
                "defaultValue": "{\n  isAuthenticated: false\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui.reducer.ts",
                "type": "State",
                "defaultValue": "{\n  isLoading: false\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.reducer.ts",
                "type": "TrainingState",
                "defaultValue": "{\n  availableExercises: [],\n  finishedExercises: [],\n  activeTraining: null,\n  editingTraining: null,\n  removingTraining: null,\n  addingTraining: null,\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/material.module.ts",
                "type": "[]",
                "defaultValue": "[\n  MatCardModule,\n  MatButtonModule,\n  MatIconModule,\n  MatFormFieldModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatInputModule,\n  MatCheckboxModule,\n  MatSidenavModule,\n  MatToolbarModule,\n  MatListModule,\n  MatTabsModule,\n  MatSelectModule,\n  MatProgressSpinnerModule,\n  MatDialogModule,\n  MatTableModule,\n  MatSortModule,\n  MatPaginatorModule,\n  MatSnackBarModule,\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.reducer.ts",
                "type": "ActionReducerMap<State>",
                "defaultValue": "{\n  ui: fromUI.uiReducer,\n  auth: fromAuth.authReducer\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SET_AUTHENTICATED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[Auth] Set Authenticated'"
            },
            {
                "name": "SET_AVAILABLE_TRAININGS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.actions.ts",
                "type": "string",
                "defaultValue": "'[Training] Set Available Exercises'"
            },
            {
                "name": "SET_FINISHED_TRAININGS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.actions.ts",
                "type": "string",
                "defaultValue": "'[Training] Set Finished Exercises'"
            },
            {
                "name": "SET_UNAUTHENTICATED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[Auth] Set Unauthenticated'"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "START_ADD_TRAINING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.actions.ts",
                "type": "string",
                "defaultValue": "'[Training] Start Add Training'"
            },
            {
                "name": "START_EDIT_TRAINING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.actions.ts",
                "type": "string",
                "defaultValue": "'[Training] Start Edit Training'"
            },
            {
                "name": "START_LOADING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui.actions.ts",
                "type": "string",
                "defaultValue": "'[UI] Start Loading'"
            },
            {
                "name": "START_REMOVE_TRAINING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.actions.ts",
                "type": "string",
                "defaultValue": "'[Training] Start Remove Training'"
            },
            {
                "name": "START_TRAINING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.actions.ts",
                "type": "string",
                "defaultValue": "'[Training] Start Training'"
            },
            {
                "name": "STOP_ADD_TRAINING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.actions.ts",
                "type": "string",
                "defaultValue": "'[Training] Stop Add Training'"
            },
            {
                "name": "STOP_EDIT_TRAINING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.actions.ts",
                "type": "string",
                "defaultValue": "'[Training] Stop Edit Training'"
            },
            {
                "name": "STOP_LOADING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui.actions.ts",
                "type": "string",
                "defaultValue": "'[UI] Stop Loading'"
            },
            {
                "name": "STOP_REMOVE_TRAINING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.actions.ts",
                "type": "string",
                "defaultValue": "'[Training] Stop Remove Training'"
            },
            {
                "name": "STOP_TRAINING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/training/training.actions.ts",
                "type": "string",
                "defaultValue": "'[Training] Stop Training'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "authReducer",
                "file": "src/app/auth/auth.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getIsAuth",
                "file": "src/app/auth/auth.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "trainingReducer",
                "file": "src/app/training/training.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "uiReducer",
                "file": "src/app/shared/ui.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AuthActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "SetAuthenticated | SetUnauthenticated",
                "file": "src/app/auth/auth.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "TrainingActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "SetAvailableTrainings | SetFinishedTrainings | StartTraining | StopTraining | StartEditTraining | StopEditTraining | StartRemoveTraining | StopRemoveTraining | StartAddTraining | StopAddTraining",
                "file": "src/app/training/training.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "UIActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StartLoading | StopLoading",
                "file": "src/app/shared/ui.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  firebase: {\n    apiKey: \"AIzaSyA92mcgAlAyhViUexZ-i18OhCkcVtpgHA4\",\n    authDomain: \"fitness-tracker-bcc28.firebaseapp.com\",\n    projectId: \"fitness-tracker-bcc28\",\n    storageBucket: \"fitness-tracker-bcc28.appspot.com\",\n    messagingSenderId: \"329650194168\",\n    appId: \"1:329650194168:web:fbf1c49ca965e7477e1d0d\"\n  }\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  firebase: {\n    apiKey: \"AIzaSyA92mcgAlAyhViUexZ-i18OhCkcVtpgHA4\",\n    authDomain: \"fitness-tracker-bcc28.firebaseapp.com\",\n    projectId: \"fitness-tracker-bcc28\",\n    storageBucket: \"fitness-tracker-bcc28.appspot.com\",\n    messagingSenderId: \"329650194168\",\n    appId: \"1:329650194168:web:fbf1c49ca965e7477e1d0d\"\n  }\n}"
                }
            ],
            "src/app/training/training.reducer.ts": [
                {
                    "name": "getActiveTrainings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.activeTraining)"
                },
                {
                    "name": "getAddingTraining",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.addingTraining)"
                },
                {
                    "name": "getAvailableExercises",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.availableExercises)"
                },
                {
                    "name": "getEditingTraining",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.editingTraining)"
                },
                {
                    "name": "getFinishedExercise",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.finishedExercises)"
                },
                {
                    "name": "getIsEditing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.editingTraining != null)"
                },
                {
                    "name": "getIsTraining",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.activeTraining != null)"
                },
                {
                    "name": "getRemovingTraining",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(getTrainingState, (state: TrainingState) => state.removingTraining)"
                },
                {
                    "name": "getTrainingState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.reducer.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<TrainingState>('training')"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.reducer.ts",
                    "type": "TrainingState",
                    "defaultValue": "{\n  availableExercises: [],\n  finishedExercises: [],\n  activeTraining: null,\n  editingTraining: null,\n  removingTraining: null,\n  addingTraining: null,\n}"
                }
            ],
            "src/app/app.reducer.ts": [
                {
                    "name": "getAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.reducer.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromAuth.State>('auth')"
                },
                {
                    "name": "getIsAuth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(getAuthState,fromAuth.getIsAuth)"
                },
                {
                    "name": "getIsLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(getUiState,fromUI.getIsLoading)"
                },
                {
                    "name": "getUiState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.reducer.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromUI.State>('ui')"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.reducer.ts",
                    "type": "ActionReducerMap<State>",
                    "defaultValue": "{\n  ui: fromUI.uiReducer,\n  auth: fromAuth.authReducer\n}"
                }
            ],
            "src/app/shared/ui.reducer.ts": [
                {
                    "name": "getIsLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui.reducer.ts",
                    "type": "",
                    "defaultValue": "(state:State) => state.isLoading"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\n  isLoading: false\n}"
                }
            ],
            "src/app/auth/auth.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/auth.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\n  isAuthenticated: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/material.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/material.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  MatCardModule,\n  MatButtonModule,\n  MatIconModule,\n  MatFormFieldModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatInputModule,\n  MatCheckboxModule,\n  MatSidenavModule,\n  MatToolbarModule,\n  MatListModule,\n  MatTabsModule,\n  MatSelectModule,\n  MatProgressSpinnerModule,\n  MatDialogModule,\n  MatTableModule,\n  MatSortModule,\n  MatPaginatorModule,\n  MatSnackBarModule,\n]"
                }
            ],
            "src/app/auth/auth.actions.ts": [
                {
                    "name": "SET_AUTHENTICATED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Auth] Set Authenticated'"
                },
                {
                    "name": "SET_UNAUTHENTICATED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Auth] Set Unauthenticated'"
                }
            ],
            "src/app/training/training.actions.ts": [
                {
                    "name": "SET_AVAILABLE_TRAININGS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Training] Set Available Exercises'"
                },
                {
                    "name": "SET_FINISHED_TRAININGS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Training] Set Finished Exercises'"
                },
                {
                    "name": "START_ADD_TRAINING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Training] Start Add Training'"
                },
                {
                    "name": "START_EDIT_TRAINING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Training] Start Edit Training'"
                },
                {
                    "name": "START_REMOVE_TRAINING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Training] Start Remove Training'"
                },
                {
                    "name": "START_TRAINING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Training] Start Training'"
                },
                {
                    "name": "STOP_ADD_TRAINING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Training] Stop Add Training'"
                },
                {
                    "name": "STOP_EDIT_TRAINING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Training] Stop Edit Training'"
                },
                {
                    "name": "STOP_REMOVE_TRAINING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Training] Stop Remove Training'"
                },
                {
                    "name": "STOP_TRAINING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/training/training.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Training] Stop Training'"
                }
            ],
            "src/app/shared/ui.actions.ts": [
                {
                    "name": "START_LOADING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui.actions.ts",
                    "type": "string",
                    "defaultValue": "'[UI] Start Loading'"
                },
                {
                    "name": "STOP_LOADING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui.actions.ts",
                    "type": "string",
                    "defaultValue": "'[UI] Stop Loading'"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/auth/auth.reducer.ts": [
                {
                    "name": "authReducer",
                    "file": "src/app/auth/auth.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIsAuth",
                    "file": "src/app/auth/auth.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/training/training.reducer.ts": [
                {
                    "name": "trainingReducer",
                    "file": "src/app/training/training.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/ui.reducer.ts": [
                {
                    "name": "uiReducer",
                    "file": "src/app/shared/ui.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/auth/auth.actions.ts": [
                {
                    "name": "AuthActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "SetAuthenticated | SetUnauthenticated",
                    "file": "src/app/auth/auth.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/training/training.actions.ts": [
                {
                    "name": "TrainingActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "SetAvailableTrainings | SetFinishedTrainings | StartTraining | StopTraining | StartEditTraining | StopEditTraining | StartRemoveTraining | StopRemoveTraining | StartAddTraining | StopAddTraining",
                    "file": "src/app/training/training.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/shared/ui.actions.ts": [
                {
                    "name": "UIActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StartLoading | StopLoading",
                    "file": "src/app/shared/ui.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "WelcomeComponent"
                    },
                    {
                        "path": "training",
                        "loadChildren": "./training/training.module#TrainingModule",
                        "canLoad": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/training/training-routing.module.ts",
                                        "module": "TrainingRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "TrainingComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "TrainingModule"
                            }
                        ]
                    },
                    {
                        "path": "settings",
                        "loadChildren": "./setting/setting.module#SettingModule",
                        "canLoad": [
                            "AuthGuard"
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/auth/auth-routing.module.ts",
                "module": "AuthRoutingModule",
                "children": [
                    {
                        "path": "signup",
                        "component": "SignupComponent"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/setting/settings-routing.module.ts",
                "module": "SettingsRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "SettingComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getIsAuth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getIsLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUiState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetAuthenticated",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetUnauthenticated",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SET_AUTHENTICATED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SET_UNAUTHENTICATED",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "authReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getIsAuth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/signup/signup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation/sidenav-list/sidenav-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidenavListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/setting/delete-training/delete-training.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteTrainingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/setting/set-training/set-training.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SetTrainingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/setting/setting.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StartLoading",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StopLoading",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "START_LOADING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STOP_LOADING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "uiReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getIsLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UIService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/training/current-training/current-training.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CurrentTrainingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/training/exercise.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Exercise",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/training/new-training/new-training.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewTrainingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/training/past-trainings/past-trainings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PastTrainingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/training/stop-training/stop-training.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StopTrainingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetAvailableTrainings",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetFinishedTrainings",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StartAddTraining",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StartEditTraining",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StartRemoveTraining",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StartTraining",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StopAddTraining",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StopEditTraining",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StopRemoveTraining",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StopTraining",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SET_AVAILABLE_TRAININGS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SET_FINISHED_TRAININGS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "START_ADD_TRAINING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "START_EDIT_TRAINING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "START_REMOVE_TRAINING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "START_TRAINING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STOP_ADD_TRAINING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STOP_EDIT_TRAINING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STOP_REMOVE_TRAINING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STOP_TRAINING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TrainingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TrainingState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "trainingReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getActiveTrainings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAddingTraining",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAvailableExercises",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getEditingTraining",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getFinishedExercise",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getIsEditing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getIsTraining",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRemovingTraining",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTrainingState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/training/training.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TrainingService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/welcome/welcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}